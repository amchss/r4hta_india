{
  "hash": "edc9e4bfdcce93cef54a5f8a8f204085",
  "result": {
    "engine": "knitr",
    "markdown": "---\nembed-resources: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n# Introduction to R and RStudio\n\n## What is R?\n\n:::::: {layout=\"[ 80, 20 ]\"}\n:::: {#first-column}\n::: {style=\"text-align:justify\"}\n-   Open source (free!) statistical programming language/software\n\n-   It can be used for:\n\n    -   Working with data - cleaning, wrangling and transforming\n    -   Conducting analyses including advanced statistical methods\n    -   Creating high-quality tables & figures\n    -   Communicate research with R Markdown\n\n-   It is constantly growing!\n\n-   Has a strong online support community\n\n-   Since it's one programming language, it is versatile enough to take you from raw data to publishable research using free, reproducible code!\n:::\n::::\n\n::: {#second-column}\n![](images/Rlogo.JPG)\n:::\n::::::\n\n## What is RStudio?\n\n:::::: {layout=\"[ 80, 20 ]\"}\n<div>\n\n::: {style=\"text-align:justify\"}\n-   RStudio is a free, open source IDE (integrated development environment) for R. (You must install R before you can install RStudio.)\n\n-   Its interface is organized so that the user can clearly view graphs, tables, R code, and output all at the same time.\n\n-   It also offers an Import-Wizard-like feature that allows users to import CSV, Excel, SPSS (\\*.sav), and Stata (\\*.dta) files into R without having to write the code to do so.\n:::\n\n</div>\n\n<div>\n\n![](images/RStudiologo.png){width=\"\\\"50%\"}\n\n</div>\n::::::\n\n## R versus Others Softwares\n\n::: {style=\"text-align:justify\"}\nExcel and SPSS are convenient for data entry, and for quickly manipulating rows and columns prior to statistical analysis. However, they are a poor choice for statistical analysis beyond the simplest descriptive statistics, or for more than a very few columns.\n:::\n\n![Proportion of articles in health decision sciences using the identified software](images/r_vs_others.JPG){width=\"400\"}\n\n## Why should you learn R\n\n::: {style=\"text-align:justify\"}\n-   R is becoming the \"*lingua franca*\" of data science\n-   Most widely used and it is rising in popularity\n-   R is also the tool of choice for data scientists at Microsoft, Google, Facebook, Amazon\n-   R's popularity in academia is important because that creates a pool of talent that feeds industry.\n-   Learning the \"skills of data science\" is easiest in R\n\n![Increasing use of R in scientific research](images/r_nature.JPG){width=\"262\"}\n\nSome of the reasons for chosing R over others are are:\n\n-   Missing values are handled inconsistently, and sometimes incorrectly.\n-   Data organisation difficult.\n-   Analyses can only be done on one column at a time.\n-   Output is poorly organised.\n-   No record of how an analysis was accomplished.\n-   Some advanced analyses are impossible\n:::\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n## Health Data Science\n\n::: {style=\"text-align:justify\"}\nHealth Data Science is an emerging discipline, combining mathematics, statistics, epidemiology and informatics.\n\nR is widely used in the field of health data science and especially in healthcare industry domains like genetics, drug discovery, bioinformatics, vaccine reasearch, deep learning, epidemiology, public health, vaccine research, etc.\n\n<br>\n\n![Applications of Data Science in Healthcare](images/big_data_healthcare_applications.png){width=\"368\"}\n\nAs data-generating technologies have proliferated throughout society and industry, leading hospitals are trying to ensure this data is harnessed to achieve the best outcomes for patients. These internet of things (IoT) technologies include everything from sensors that monitor patient health and the condition of machines to wearables and patients' mobile phones. All these comprise the \"Big Data\" in healthcare.\n:::\n\n## Reproducible Research\n\n::: {style=\"text-align:justify\"}\nResearch is considered to be reproducible when the exact results can be reproduced if given access to the original data, software, or code.\n\n-   The same results should be obtained under the same conditions\n-   It should be possible to recreate the same conditions\n\n> Reproducibility refers to the ability of a researcher to duplicate the results of a prior study using the same materials as were used by the original investigator. That is, a second researcher might use the same raw data to build the same analysis files and implement the same statistical analysis in an attempt to yield the same results. Reproducibility is a minimum necessary condition for a finding to be believable and informative. --- U.S. National Science Foundation (NSF) subcommittee on Replicability in Science\n:::\n\nThere are four key elements of reproducible research:\n\n-   data documentation\n-   data publication\n-   code publication\n-   output publication\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n![Baker, M. 1,500 scientists lift the lid on reproducibility. Nature 533, 452--454 (2016)](images/reproducibility_crisis.jpg)\n\n\n\n\n{{< pagebreak >}}\n\n\n\n\n\n\n![Flavours of Reproducible Research](images/reproducible-replicable-robust-generalisable.png){width=\"400\"}\n\n**Factors behind irreproducible research**\n\n::: {style=\"text-align:justify\"}\n-   Not enough documentation on how experiment is conducted and data is generated\n-   Data used to generate original results unavailable\n-   Software used to generate original results unavailable\n-   Difficult to recreate software environment (libraries, versions) used to generate original results\n-   Difficult to rerun the computational steps\n:::\n\n\\bigskip\n\n![Threats to Reproducibility (Munafo. et. al, 2017)](images/threats_reproducibility.png){width=\"300\"}\n\n\\bigskip\n\n::: {style=\"text-align:justify\"}\nWhile reproducibility is the minimum requirement and can be solved with \"good enough\" computational practices, replicability/ robustness/ generalisability of scientific findings are an even greater concern involving research misconduct, questionable research practices (p-hacking, HARKing, cherry-picking), sloppy methods, and other conscious and unconscious biases.\n:::\n\n\\bigskip\n\n**What are the good practices of reproducible research?**\n\n\\bigskip\n\n**How to make your work reproducible?**\n\n\\bigskip\n\n**Reproducible workflows give you credibility!**\n\n![Cartoon created by Sidney Harris (The New Yorker)](images/miracles.jpg){width=\"400\"}\n\n\\bigskip\n\n![Reproducibility spectrum for published research. Source: Peng, RD Reproducible Research in Computational Science Science (2011)](images/reproducibility_spectrum.jpg){width=\"500\"}\n\n\n\n## Getting Comfortable with R and RStudio\n\n### Install R\n\n:::{style=\"text-align:justify\"}\n\n1.  Go here: <https://cran.rstudio.com/>\n\n2.  Choose the correct \"Download R for. . .\" option from the top (probably Windows or macOS), then...\n\n<!-- -->\n\na.  For Windows users, choose \"Install R for the first time\" (next to the base subdirectory) and then \"Download R 4.4.2 for Windows\"\n\nb.  For macOS users, select the appropriate version for your operating system (e.g. the latest release is version 4.4.2, will look something like R-4.4.2-arm64.pkg), then choose to Save or Open\n\nc.  Once downloaded, save, open once downloaded, agree to license, and install like you would any other software.\n\n:::\n\n![If it installs, you should be able to find the R icon in your applications.](images/Rlogo.JPG){width=\"80\"}\n\n### Install RStudio\n\n:::{style=\"text-align:justify\"}\n\nRStudio is a user-friendly interface for working with R. That means you must have R already installed for RStudio to work. Make sure you've successfully installed R in Step 1, then. . .\n\n1.  Go to <https://www.rstudio.com/products/rstudio/download/> to download RStudio Desktop (Open Source License). You'll know you're clicking the right one because it says \"FREE\" right above the download button.\n\n2.  Click download, which takes you just down the page to where you can select the correct version under Installers for Supported Platforms (almost everyone will choose one of the first two options, RStudio for Windows or macOS).\n\n3.  Click on the correct installer version, save, open once downloaded, agree to license and install like you would any other software. The version should be at least RStudio 2024.09 \"Cranberry Hibiscus\", 2024.\n\n:::\n\n![If it installs, you should be able to find the RStudio icon in your applications.](images/RStudiologo.png){width=\"80\"}\n\n## Understanding the RStudio environment\n\n### Pane layout\n\n:::{style=\"text-align:justify\"}\n\nThe RStudio environment consist of multiple windows. Each window consist of certain Panels\n\nPanels in RStudio\n\n1.  Source\n2.  Console\n3.  Environment\n4.  History\n5.  Files\n6.  Plots\n7.  Connections\n8.  Packages\n9.  Help\n10. Build\n11. Tutorial\n12. Viewer\n\nIt is important to understand that not all panels will be used by you in routine as well as by us during the workshop. The workshop focuses on using R for healthcare professionals as a database management, visualization, and communication tool. The most common panels which requires attention are the source, console, environment, history, files, packages, help, tutorial, and viewer panels.\n\n:::\n\n### A guided tour\n\n:::{style=\"text-align:justify\"}\n\nYou are requested to make your own notes during the workshop. Let us dive deep into understanding the environment further in the workshop.\n\n:::\n\n\n\n### File types in R\n\n:::{style=\"text-align:justify\"}\n\nThe most common used file types are\n\n1.  `.R` : Script file\n2.  `.Rmd` : RMarkdown file\n3.  `.qmd` : Quarto file\n4.  `.rds` : Single R database file\n5.  `.RData` : Multiple files in a single R database file\n\n:::\n\n### Programming basics.\n\n:::{style=\"text-align:justify\"}\n\nR is easiest to use when you know how the R language works. This section will teach you the implicit background knowledge that informs every piece of R code. You'll learn about:\n\n1.  Functions and their arguments\n2.  Objects\n3.  R's basic data types\n4.  R's basic data structures including vectors and lists\n5.  R's package system\n\n:::\n\n### Functions and their arguments.\n\n:::{style=\"text-align:justify\"}\n\nTo do anything in R, we call functions to work for us. Take for example, we want to compute square root of 5197. Now, we need to call a function `sqrt()` for the same.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(5197)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 72.09022\n```\n\n\n:::\n:::\n\n\n\n\n**Important things to know about functions include:**\n\n1.  **Code body**.\n\nTyping code body and running it enables us understand what a function does in background.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (x)  .Primitive(\"sqrt\")\n```\n\n\n:::\n:::\n\n\n\n\n2.  **Run a function**.\n\nTo run a function, we need to add a parenthesis `()` after the code body. Within the parenthesis we add the details such as number in the above example.\n\n3.  **Help page**.\n\nPlacing a question mark before the function takes you to the help page. This is an **important** aspect we need to understand. When calling help page parenthesis is not placed. This help page will enable you learn about new functions in your journey!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?sqrt \n```\n:::\n\n\n\n\n:::\n\n**Tip:**\n\n:::{style=\"text-align:justify\"}\n\nAnnotations are meant for humans to read and not by machines. It enables us take notes as we write. As a result, next time when you open your code even after a long time, you will know what you did last summer :)\n\n<br>\n\n**Arguments** are inputs provided to the function. There are functions which take no arguments, some take a single argument and some take multiple arguments. When there are two or more arguments, the arguments are separated by a comma.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# No argument\nSys.Date()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-09-11\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# One argument\nsqrt(5197)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 72.09022\n```\n\n\n:::\n\n```{.r .cell-code}\n# Two arguments\nsum(2,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Multiple arguments\nseq(from=1,\n    to = 10, \n    by  = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5 7 9\n```\n\n\n:::\n:::\n\n\n\n\n**Matching arguments**: Some arguments are understood as such by the software. Take for example, generating a sequence includes three arguments viz: from, to, by. The right inputs are automatically matched to the right argument.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1,10,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5 7 9\n```\n\n\n:::\n:::\n\n\n\n\n**Caution**: The wrong inputs are also matched. Best practice is to be explicit at early stages. Use argument names!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(2,10,1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  3  4  5  6  7  8  9 10\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(by = 2,\n    to = 10,\n    from = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5 7 9\n```\n\n\n:::\n:::\n\n\n\n\nOptional arguments: Some arguments are optional. They may be added or removed as per requirement. By default these optional arguments are taken by R *as default* values. Take for example, in `sum()` function, `na.rm = FALSE` is an optional argument. It ensures that the NA values are not removed by default and the sum is not returned when there are NA values. These optional arguments can be override by mentioning them explicitly.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(2,3,NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(2,3,NA, na.rm = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n\nIn contrast, the arguments which needs to be mentioned explicitly are mandatory! Without them, errors are returned as output.\n\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt()\n```\n:::\n\n\n\n\n### Objects.\n\n:::{style=\"text-align:justify\"}\n\nIf we want to use the results in addition to viewing them in console, we need to store them as objects. To create an object, type the name of the object (Choose wisely, let it be explicit and self explanatory!), then provide an assignment operator. Everything to the right of the operator will be assigned to the object. You can save a single value or output of a function or multiple values or an entire data set in a single object.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Single value\nx <- 3\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Output from function\nx <- seq(from=1,\n    to = 10, \n    by  = 2)\n# Better name:\nsequence_from_1_to_10 <- seq(from=1,\n    to = 10, \n    by  = 2)\n```\n:::\n\n\n\n\nCreating an object helps us in viewing its contents as well make it easier to apply additional functions\n\n**Tip.** While typing functions/ object names, R prompts are provided. Choose from the prompts rather than typing the entire thing. It will ease out many things later!\n\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsequence_from_1_to_10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5 7 9\n```\n\n\n:::\n\n```{.r .cell-code}\nsum(sequence_from_1_to_10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25\n```\n\n\n:::\n:::\n\n\n\n\n### Vectors\n\n:::{style=\"text-align:justify\"}\n\nR stores values as a vector which is one dimensional array. Arrays can be two dimensional (similar to excel data/ tabular data), or multidimensional. Vectors are always one dimensional!\n\nVectors can be a single value or a combination of values. We can create our own vectors using `c()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsingle_number <- 3\nsingle_number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\nnumber_vector <- c(1,2,3)\nnumber_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n\nCreating personalized vectors is powerful as a lot of functions in R takes vectors as inputs.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(number_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\nVectorized functions: The function is applied to each element of the vector:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(number_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.000000 1.414214 1.732051\n```\n\n\n:::\n:::\n\n\n\n\nIf we have two vectors of similar lengths (such as columns of a research data), vectorised functions help us compute for new columns by applying the said function on each element of both the vectors and give a vector of the same length (Consider this as a new column in the research data)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumber_vector2 <- c(3,-4,5.4)\nnumber_vector + number_vector2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  4.0 -2.0  8.4\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n### Data Types\n\n:::{style=\"text-align:justify\"}\n\nR recognizes different types of vectors based on the values in the vector.\n\nIf all values are numbers (positive numbers, negative numbers, decimals), R will consider that vector as numerical and allows you to carry out mathematical operations/ functions. You can find the class of the vector by using `class()` function.R labels these vectors as \"double\", \"numeric\", or \"integers\".\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(number_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(number_vector2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\nIf the values are within quotation marks, it is character variable by default. It is equivalent to nominal variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalphabets_vector <- c(\"a\", \"b\", \"c\")\nclass(alphabets_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\ninteger_vector <- c(1L,2L)\nclass(integer_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n\n\nLogical vectors contain TRUE and FALSE values\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogical_vector <- c(TRUE, FALSE)\nclass(logical_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\n\nFactor vectors are categorical variables. Other variable types can be converted to factor type using function`factor()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor_vector <- factor(number_vector)\nfactor_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\nLevels: 1 2 3\n```\n\n\n:::\n:::\n\n\n\n\nWe can add labels to factor vectors using optional arguments\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfactor_vector <- factor(number_vector,\n                        levels =c(1,2,3),\n                        labels = c(\"level1\", \n                                   \"level2\", \n                                   \"level3\"))\nfactor_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] level1 level2 level3\nLevels: level1 level2 level3\n```\n\n\n:::\n:::\n\n\n\n\n**One vector = One type**. For example: When there is mix of numbers and characters, R will consider all as character.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmix_vector <- c(1,\"a\")\nclass(mix_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\nNote that the number 1 has been converted into character class.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmix_vector[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmix_vector[1] |> class()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\nDouble, character, integer, logical, complex, raw, dates, etc... There are many other data types and objects but for now, lets start with these. You will understand additional types as you will proceed in your R journey!\n\n:::\n\n### Lists\n\n:::{style=\"text-align:justify\"}\n\nIn addition to vectors, lists are another powerful objects. A list can be considered as a vector of vectors!! They enable you to store multiple types of vectors together. A list can be made using a `list()` function. It is similar to `c()` function but creates a list rather than a vector. It is a good practice to name the vectors in the list.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_list <- list(numbers = number_vector, \n                     alphabets = alphabets_vector)\nclass(example_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n\n```{.r .cell-code}\nexample_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$numbers\n[1] 1 2 3\n\n$alphabets\n[1] \"a\" \"b\" \"c\"\n```\n\n\n:::\n:::\n\n\n\n\nThe elements of a named list/ a named vector can be called by using a `$`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_list$numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n### Packages\n\n:::{style=\"text-align:justify\"}\n\nThere are thousands of functions in R. To be computationally efficient, R do not load all functions on start. It loads only base functions. As you want to use additional functions, we need to load the packages using `library()` function.\n\n\\textbf{Important}\n\nThe additional packages are installed once but loaded everytime you start R sessions.\n\nWith these basics, lets deep dive into the workshop!! Are you ready?\n\n:::\n\n\n\n\n---\nembed-resources: true\n---\n\n\n\n\n## Fundamentals of Working with Data\n\n::: {style=\"text-align:justify\"}\nIn this section, we will be learning how to import, and export data from R. We will also be talking about the different file types. This section is based on the relevant chapters from two of the renowned textbooks on `tidyverse`.[^fundamentals_dplyr_v2-1] These textbooks take different approaches for importing and working with data in RStudio using `tidyverse` packages. We present to you the most optimal workflows to facilitate reproducibility and ease of understanding.\n:::\n\n[^fundamentals_dplyr_v2-1]: [`Tidyverse` Skills for Data Science](https://jhudatascience.org/tidyversecourse/get-data.html) and [The `Tidyverse` Cookbook](https://rstudio-education.github.io/tidyverse-cookbook/import.html)\n\n\n### The Importance of Setting Up a Project\n\n::: {style=\"text-align:justify\"}\nBefore diving into data analysis and working with R, it’s crucial to establish a well-organized workflow. Setting up an R project for each analysis in RStudio is one of the best practices for maintaining this structure. Here’s why it matters:\n\n**Organized Workspace:** An R project creates a dedicated workspace, keeping all files, scripts, and data for each analysis in one place. This structure makes it easier to locate and manage your resources and helps prevent clutter on your computer.\n\n**Consistent File Paths:** When working within an R project, file paths become relative to the project’s root directory. This avoids the need for absolute paths (e.g., C:/Users/YourName/ProjectFolder), making your code portable. For example, using relative paths allows you to share your project with others without requiring adjustments to file paths.\n\n**Enhanced Reproducibility:** With an R project, you can easily recreate your analysis environment. The .Rproj file saves specific project settings, allowing you to return to the project later and pick up where you left off with minimal setup. This is particularly valuable when revisiting analyses or sharing work with collaborators.\n\nTo create a new project, open RStudio, go to the File menu, select New Project, and follow the prompts. You’ll see that RStudio sets up a unique working directory, which helps maintain consistency and clarity throughout your analysis.\n:::\n\n![Creating Project using RStudio](images/project2.png)\n\nOr you could try\n\n![](images/project1.png){fig-align=\"center\"}\n\n::: {style=\"text-align:justify\"}\n\nBy following this practice, you set up a solid foundation for a clean, organized, and reproducible workflow in R.\n:::\n\n### File Paths using `here`\n\n::: {style=\"text-align:justify\"}\nReading and writing files often involves the use of file paths. A file path is a string of characters that point R and RStudio to the location of the file on your computer.\n\nThese file paths can be a complete location (`C:/Users/Arun/RIntro_Book.Rmd`) or just the file name (`RIntro_Book.Rmd`). If you pass R a partial file path, R will append it to the end of the file path that leads to your working directory. The working directory is the directory where your `.Rproj` file is.\n\nWhen working with files in R, defining paths correctly is essential for accessing your data and saving outputs. The here package is a powerful tool that simplifies file paths, especially within R projects, by automatically locating the root directory of your project.\n\n#### Why Use `here`?\n\n**Simplifies Paths**: Instead of typing out long, complex file paths, here constructs paths relative to the root of your project. This makes your code cleaner and easier to read.\n\n**Improves Portability**: Using here makes your code more portable. When sharing your project with others or switching between computers, the paths generated by here adjust automatically based on the project’s root, so there’s no need to modify paths manually.\n\n**Avoids Path Errors**: Typing out file paths can lead to errors if you move files around or change directories. The here function helps prevent these issues by always starting paths from the same project root.\n\nUsing here in Practice The here package creates paths by combining the project root directory with any subdirectories or file names you specify. For example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"pacman\")\n\npacman::p_load(here)\n\nhere()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"D:/websites/r4hta_india\"\n```\n\n\n:::\n:::\n\n\n\n\nWhen you run here::here() in your R project, it returns the full file path up to the directory where your R project was created. This directory is known as the project root.\n\nIf you have a file named `nhanes_modified_df.rds` stored inside a folder called `data` within your project, you can easily reference it using the here function. By writing:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere(\"data\", \"nhanes_modified_df.rds\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"D:/websites/r4hta_india/data/nhanes_modified_df.rds\"\n```\n\n\n:::\n:::\n\n\n\n\nyou’re creating a file path that points directly to the `nhanes_modified_df.rds` file within the data folder, starting from the root of your project. This method keeps things neat, adaptable, and prevents hardcoding of long file paths. Whether you move your project to another computer or share it with someone else, this path will still work without any changes. It’s a simple way to make your workflow more efficient!\n:::\n\n### Importing data using the RStudio GUI\n\n::: {style=\"text-align:justify\"}\n\nThe RStudio IDE provides an Import Dataset button in the Environment pane, which appears in the top right corner of the IDE by default. You can use this button to import data that is stored in plain text files as well as in Excel, SAS, SPSS, and Stata files.\n\n![](images/import_dataset_1.png){fig-align=\"center\"}\n\nWe recommend using `.csv` file type to read and write your data as a best practice. This will ensure cross compatibility between various programs as it is just a raw text file but just separated by a comma.\n\n:::\n\n### Importing and Exporting Data (`.rds`) using a Library\n\n::: {style=\"text-align:justify\"}\n\n`.rds` is a file format native to R for saving compressed content. `.rds` files are not text files and are not human readable in their raw form. Each `.rds` file contains a single object, which makes it easy to assign its output directly to a single R object. This is not necessarily the case for `.RData` files, which makes `.rds` files safer to use.\n\nWe can use the `read_rds()` and `write_rds()` function from the `readr` package to read and write an `.rds` file. `write_rds()` function save the previously loaded data, as an `.rds` file using this function. You can look at the help menu to know more on the syntax or you can type `?write_rds` in the Console pane.\n\neg:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- readr::read_rds(here(\"data\", \"nhanes_modified_df.rds\"))\n```\n:::\n\n\n\n\nIn the above line of code we are instructing R to:\n\n-   **Look inside the project folder:** `here::here(\"data\", \"nhanes_modified_df.rds\")` tells R to look in the `data` folder within your project for a file named `nhanes_modified_df.rds.`\n\n-   **Read the .rds file:** `readr::read_rds()` is used to load this .rds file into the object df.\n\nHowever, if there is:\n\n-   A spelling mistake in either the folder name (`data`) or the file name (`nhanes_modified_df.rds`), or\n\n-   The file doesn’t exist at the specified location,\n\nR will not be able to find the file, and you'll encounter an error message, typically saying the file cannot be found.\n\nSimilarly, you can use the `write_csv()` function from the `readr` package to write a `.csv` file.\n\ntry!!!\n\n:::\n\n**Note**\n\nThere are different packages to import different types of data.\n\n-   `haven` : SPSS, Stata, or SAS\n-   `readxl` : Excel spreadsheets\n-   `readr` : csv, txt, tsv etc.\n\n### Tibble and Data.frames\n\n::: {style=\"text-align:justify\"}\n\nWhen working with data in R, you'll frequently encounter two common types of data structures: tibbles and data.frames. While both are used to store tabular data, they have some important differences that affect how they behave and how you interact with them. Understanding these differences can help streamline your data analysis and avoid potential pitfalls.\n\nTo learn more in-depth about tibbles, you can run vignette(\"tibble\") in your R console, which provides a comprehensive overview.\n\n![](images/tibble.jpg){fig-align=\"center\" width=\"100\"}\n\nSome major differences are:\n\n-   Input type remains unchanged - `data.frame` changes strings as factors; `tibble` will not\n-   Variable names remain unchanged - `data.frame` will remove spaces or add \"x\" before numeric column names. `tibble` will not.\n-   There are no `row.names()` for a `tibble`\n-   `tibble` print first ten rows and columns that fit on one screen\n\n:::\n\n### Principles of Tidy Data\n\n#### What is Tidy Data?\n\n::: {style=\"text-align:justify\"}\n\n> Tidy data is a way to describe data that's organized with a particular structure -- a rectangular structure, where each variable has its own column, and each observation has its own row. --- Hadley Wickham, 2014\n\n:::\n\n#### Three Rules of Tidy Data\n\n::: {style=\"text-align:justify\"}\n\n1.  Each variable must have its own column.\n2.  Each observation must have its own row.\n3.  Each value must have its own cell.\n\nThese three rules are interrelated because it's impossible to only satisfy two of the three.\n\n:::\n\n![](images/tidy-1.png){fig-align=\"center\"}\n\n#### Messy Data vs Tidy Data\n\n::: {style=\"text-align:justify\"}\n\n> Tidy datasets are all alike, but every messy dataset is messy in its own way. - Hadley Wickham\n\n![Source: R for Data Science (http://r4ds.had.co.nz/)](images/messy_tidy.png){fig-align=\"center\" width=\"500\"}\n\n![](images/tidy_messy.JPG){fig-align=\"center\" width=\"400\"}\n\n\n![](images/untidy_tools.JPG){fig-align=\"center\" width=\"400\"}\n\n:::\n\n::: {style=\"text-align:justify\"}\nWorking with messy data can be messy!. You need to build custom tools from scratch each time you work with a new dataset.\n\nIllustrations from : <https://github.com/allisonhorst/stats-illustrations>\n:::\n\n#### Tidy data for more efficient data science\n\n::: {style=\"text-align:justify\"}\nPackages like `tidyr` and `dplyr` can enable you to get on with analysing your data and start answering key questions rather than spending time in trying to clean the data.\n:::\n\n![](images/tidy-2.png){fig-align=\"center\" width=\"400\"}\n\n![](images/tidy_tools_1.JPG){fig-align=\"center\" width=\"200\"}\n\n::: {style=\"text-align:justify\"}\n*Note*\n\n*Tidy data allows you to be more efficient by using specialised tools built for the tidy workflow. There are a lot of tools specifically built to wrangle untidy data into tidy data.*\n\n![](images/tidy_workflow.JPG){fig-align=\"center\" width=\"300\"}\n\nOne other advantage of working with Tidy data is that it makes it easier for collaboration, as your colleagues can use the same familiar tools rather than getting overwhelmed with all the work you did from scratch. It is also helpful for your future self as it becomes a consistent workflow and takes less adjustment time for any incremental changes.\n\nTidy data also makes it easier to reproduce analyses because they are easier to understand, update, and reuse. By using tools together that all expect tidy data as inputs, you can build and iterate really powerful workflows.\n\n:::\n\n### A word on Tibble\n\n::: {style=\"text-align:justify\"}\n\nWhen loading data into R using the RStudio GUI using `tidyverse`, the data is automatically saved as a `tibble`. A `tibble` is a data frame, but they have some new functionalities and properties to make our life easier. It is the single most important workhorse of `tidyverse`.\n\n![tibble() vs data.frame()](images/tibble_1.jpg){fig-align=\"center\" width=\"300\"}\n\nYou can change `data.frame` objects to a `tibble` using the `as_tibble()` function.\n\n:::\n\n### Working with Tibbles\n\n::: {style=\"text-align:justify\"}\n\nNow that you have imported data into RStudio its a good practice to have a look at the data. There are many ways you can do it within RStudio.\n\n1.  Through the Environment pane\n2.  `View()` function\n3.  Simply typing the name of the dataset in the Console\n\n\nSome other things you can do to have a look at your data are:\n\n1.  Checking the class of the dataset using `class()` function\n\n2.  Checking the structure of the dataset using `str()` function\n\n*Note*\n\n*`class()` and `str()` are not just limited to datasets, they can be used for any R objects.*\n\n\n\nSome additional tips for quickly looking at your data:\n\n-   `head()`\n-   `tail()`\n-   `glimpse()`\n:::\n\n\n\n## Exploring Data with R\n\n:::{style=\"text-align:justify\"}\n\nTo recap what we learnt in the previous sessions.. we now know to work within the R Project environment. `here::here()` makes it easy for us to manage file paths. You can quickly have a look at your data using the `View()` and `glimpse()` functions. Most of the tidy data is read as `tibble` which is a workhorse of `tidyverse`.\n\n![It is here::here() is better than setwd()](images/setwd_here.png){fig-align=\"center\" width=\"300\"}\n\n![here::here() allows us to filepaths very easily](images/here.jpg){fig-align=\"center\" width=\"300\"}\n\n:::\n\n## Getting Started with the Data Exploration Pipeline\n\n### Set-up\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"pacman\")\n\n\npacman::p_load(tidyverse, here)\n\n#tidyverse required for tidy workflows\n#rio required for importing and exporting data\n#here required for managing file paths\n```\n:::\n\n\n\n\n:::{style=\"text-align:justify\"}\n\n*Note*\n\n*The shortcut for code commenting is `Ctrl+Shift+C`.*\n\n### Load Data\n\n\n> The dataset we will be working with has been cleaned (to an extent) for the purposes of this workshop. It is a dataset about NHANES that has been took from the `NHANES` and cleaned up and modified for our use. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check the file path\nhere::here(\"data\", \"nhanes_basic_info.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"D:/websites/r4hta_india/data/nhanes_basic_info.csv\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Read Data\ndf <- read_csv(here(\"data\", \"nhanes_basic_info.csv\"))\n```\n:::\n\n\n\n\nTry the following functions using tb as the argument:\n\n-   `glimpse()`\n-   `head()`\n-   `names()`\n\n\n\n\n\n\n\n\n\nNow, we will be introducing you to two new packages:\n\n1.  `dplyr`\n2.  `skimr`\n3.  `DataExplorer`\n\n:::\n\n## `dplyr` Package\n\n:::{style=\"text-align:justify\"}\n\nThe `dplyr` is a powerful R-package to manipulate, clean and summarize unstructured data. In short, it makes data exploration and data manipulation easy and fast in R.\n\n![](images/dplyr.png){fig-align=\"center\" width=\"300\"}\n\nThere are many verbs in `dplyr` that are useful, some of them are given here...\n\n![Important functions of the dplyr package to remember](images/dplyr_fns.JPG){fig-align=\"center\" width=\"300\"}\n\n![Syntax structure of the dplyr verb](images/dplyr-verb.png){fig-align=\"center\" width=\"280\"}\n\n:::\n\n### Getting used to the pipe `|>` or `%>%`\n\n:::{style=\"text-align:justify\"}\n\n![The pipe operator in dplyr](images/dplyr-pipe.png){fig-align=\"center\" width=\"280\"}\n\n*Note*\n\n*The pipe `|>` means THEN...*\n\n*The pipe is an operator in R that allows you to chain together functions in `dplyr`.*\n\nLet's find the bottom 50 rows of tb without and with the pipe.\n\n*Tips* The native pipe \\|\\> is preferred.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#without the pipe\ntail(df, n = 50)\n\n#with the pipe\ndf |> tail(n = 50)\n```\n:::\n\n\n\n\nNow let's see what the code looks like if we need 2 functions. Find the unique age in the bottom 50 rows of df\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#without the pipe\nunique(tail(df, n = 50)$age)\n\n# with the pipe\ndf |> \n  tail(50) |>\n  distinct(age)\n```\n:::\n\n\n\n\n*Note*\n\n*The shortcut for the pipe is `Ctrl+Shift+M`*\n\nYou will notice that we used different functions to complete our task. The code without the pipe uses functions from base R while the code with the pipe uses a mixture (`tail()` from base R and `distinct()` from `dplyr`). Not all functions work with the pipe, but we will usually opt for those that do when we have a choice.\n\n:::\n\n### `distinct()` and `count()`\n\n:::{style=\"text-align:justify\"}\n\nThe `distinct()` function will return the distinct values of a column, while `count()` provides both the distinct values of a column and then number of times each value shows up. The following example investigates the different race (`race`) in the `df` dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  distinct(race) \n\ndf |> \n  count(race)\n```\n:::\n\n\n\n\nNotice that there is a new column produced by the count function called `n`.\n\n:::\n\n### `arrange()`\n\n:::{style=\"text-align:justify\"}\n\nThe `arrange()` function does what it sounds like. It takes a data frame or tbl and arranges (or sorts) by column(s) of interest. The first argument is the data, and subsequent arguments are columns to sort on. Use the `desc()` function to arrange by descending.\n\nThe following code would get the number of times each race is in the dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  count(race) |> \n  arrange(n)\n\n# Since the default is ascending order, \n# we are not getting the results that are probably useful, \n# so let's use the desc() function\ndf |> \n  count(race) |> \n  arrange(desc(n))\n\n# shortcut for desc() is -\ndf |> \n  count(race) |> \n  arrange(-n)\n```\n:::\n\n\n\n\n:::\n\n\n### `filter()`\n\n:::{style=\"text-align:justify\"}\n\nIf you want to return **rows** of the data where some criteria are met, use the `filter()` function. This is how we subset in the tidyverse. (Base R function is `subset()`)\n\n![](images/dplyr_filter.png){fig-align=\"center\" width=\"300\"}\n\nHere are the logical criteria in R:\n\n-   `==`: *Equal to*\n-   `!=`: *Not equal to*\n-   `>`: *Greater than*\n-   `>=`: *Greater than or equal to*\n-   `<`: *Less than*\n-   `<=`: *Less than or equal to*\n\nIf you want to satisfy *all* of multiple conditions, you can use the \"and\" operator, `&`.\n\nThe \"or\" operator `|` (the vertical pipe character, shift-backslash) will return a subset that meet *any* of the conditions.\n\nLet's see all the data for age 60 or above\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  filter(age >= 60)\n```\n:::\n\n\n\n\nLet's just see data for white\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  filter(race == \"White\")\n```\n:::\n\n\n\n\nBoth White and age 60 or more \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_60_plus_white <- df |> \n  filter(age >= 60 & race == \"White\")\n```\n:::\n\n\n\n\n::: \n\n### `%in%`\n\n:::{style=\"text-align:justify\"}\n\nTo `filter()` a categorical variable for only certain levels, we can use the `%in%` operator.\n\nLets check which are the race groups that are in the dataset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  select(race) |> \n  unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  race    \n  <chr>   \n1 White   \n2 Mexican \n3 Hispanic\n4 Other   \n5 Black   \n```\n\n\n:::\n:::\n\n\n\n\nNow we'll create a vector of races we are interested in \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nothers <- c(\"Mexican\", \n              \"Hispanic\", \n              \"Other\")\n```\n:::\n\n\n\n\n\n\nAnd use that vector to `filter()` `df` for races `%in%` `minority`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  filter(race %in% others)\n```\n:::\n\n\n\n\nYou can also save the results of a pipeline. Notice that the rows belonging to minority races are returned in the console. If we wanted to do something with those rows, it might be helpful to save them as their own dataset. To create a new object, we use the `<-` operator.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nothers_df <- df |> \n  filter(race %in% others)\n```\n:::\n\n\n\n\n:::\n\n### `drop_na()`\n\n:::{style=\"text-align:justify\"}\n\nThe `drop_na()` function is extremely useful for when we need to subset a variable to remove missing values.\n\nReturn the NHANES dataset without rows that were missing on the education variable\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  drop_na(education)\n```\n:::\n\n\n\n\nReturn the dataset without any rows that had an NA in any column. \\*Use with caution because this will remove a lot of data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  drop_na()\n```\n:::\n\n\n\n\n:::\n\n### `select()`\n\n:::{style=\"text-align:justify\"}\n\nWhereas the `filter()` function allows you to return only certain *rows* matching a condition, the `select()` function returns only certain *columns*. The first argument is the data, and subsequent arguments are the columns you want.\n\nSee just the country, year, incidence_100k columns\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# list the column names you want to see separated by a comma\n\ndf |>\n  select(id, age, education)\n```\n:::\n\n\n\n\nUse the - sign to drop these same columns\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  select(-age_months, -poverty, -home_rooms)\n```\n:::\n\n\n\n\n:::\n\n### `select()` helper functions\n\n:::{style=\"text-align:justify\"}\n\nThe `starts_with()`, `ends_with()` and `contains()` functions provide very useful tools for dropping/keeping several variables at once without having to list each and every column you want to keep. The function will return columns that either start with a specific string of text, ends with a certain string of text, or contain a certain string of text.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# these functions are all case sensitive\ndf |>\n  select(starts_with(\"home\"))\n\ndf |>\n  select(ends_with(\"t\"))\n\ndf |>\n  select(contains(\"_\"))\n\n# columns that do not contain -\ndf |>\n  select(-contains(\"_\"))\n```\n:::\n\n\n\n\n:::\n\n### `summarize()`\n\n:::{style=\"text-align:justify\"}\n\nThe `summarize()` function summarizes multiple values to a single value. On its own the `summarize()` function doesn't seem to be all that useful. The dplyr package provides a few convenience functions called `n()` and `n_distinct()` that tell you the number of observations or the number of distinct values of a particular variable.\n\n*Note* *`summarize()` is the same as `summarise()`*\n\nNotice that summarize takes a data frame and returns a data frame. In this case it's a 1x1 data frame with a single row and a single column.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  summarize(mean(age))\n\n# watch out for nas. Use na.rm = TRUE to run the calculation after excluding nas.\n\ndf |>\n  summarize(mean(weight, na.rm = TRUE))\n```\n:::\n\n\n\n\nThe name of the column is the expression used to summarize the data. This usually isn't pretty, and if we wanted to work with this resulting data frame later on, we'd want to name that returned value something better.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  summarize(mean_age = mean(age, na.rm = TRUE))\n```\n:::\n\n\n\n\n:::\n\n### `group_by()`\n\n:::{style=\"text-align:justify\"}\n\nWe saw that `summarize()` isn't that useful on its own. Neither is `group_by()`. All this does is takes an existing data frame and converts it into a grouped data frame where operations are performed by group.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(gender) \n\ndf |>\n  group_by(gender, race)\n```\n:::\n\n\n\n\n:::\n\n### `group_by()` and `summarize()` together\n\n:::{style=\"text-align:justify\"}\n\nThe real power comes in where `group_by()` and `summarize()` are used together. First, write the `group_by()` statement. Then pipe the result to a call to `summarize()`.\n\nLet's summarize the mean incidence of tb for each year\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(race) |>\n  summarize(mean_height = mean(height, na.rm = TRUE))\n\n#sort the output by descending mean_inc\ndf |>\n  group_by(race) |>\n  summarize(mean_height = mean(height, na.rm = TRUE))|>\n  arrange(desc(mean_height))\n```\n:::\n\n\n\n\n:::\n\n### `mutate()`\n\n:::{style=\"text-align:justify\"}\n\nMutate creates a new variable or modifies an existing one.\n\n![](images/dplyr_mutate.png){fig-align=\"center\" width=\"300\"}\n\nLets create a column called `elderly` if the age is greater than or equal to 65.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  mutate(elderly = if_else(\n    age >= 65,\n    \"Yes\", \n    \"No\"))\n```\n:::\n\n\n\n\nThe same thing can be done using `case_when()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  mutate(elderly = case_when(\n    age >= 65 ~ \"Yes\",\n    age < 65 ~ \"No\",\n    TRUE ~ NA))\n```\n:::\n\n\n\n\nLets do it again, but this time let us make it 1 and 0, 1 if age is greater than or equal to 65, 0 if otherwise.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  mutate(old = case_when(\n    age >= 65 ~ 1,\n    age < 65 ~ 0,\n    TRUE ~ NA))\n```\n:::\n\n\n\n\n![](images/dplyr_case_when_sm.png){fig-align=\"center\" width=\"300\"}\n\n*Note*\n\n*The `if_else()` function may result in slightly shorter code if you only need to code for 2 options. For more options, nested `if_else()` statements become hard to read and could result in mismatched parentheses so `case_when()` will be a more elegant solution.*\n\nAs a second example of `case_when()`, let's say we wanted to create a new income variable that is low, medium, or high.\n\nSee the `income_hh` broken into 3 equally sized portions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(df$income_hh, prob = c(.33, .66), na.rm = T)\n```\n:::\n\n\n\n\n*Note*\n\n*See the help file for `quanile` function or type `?quantile` in the console.*\n\nWe'll say:\n\n-   low = 30000 or less\n-   medium = between 30000 and 70000\n-   high = above 70000\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  mutate(income_cat = case_when(\n    income_hh <= 30000 ~ \"low\",\n    income_hh > 30000 & income_hh <= 70000 ~ \"medium\",\n    income_hh > 70000 ~ \"high\",\n    TRUE ~ NA)) \n```\n:::\n\n\n\n\n:::\n\n### `join()`\n\n:::{style=\"text-align:justify\"}\n\nTypically in a data science or data analysis project one would have to work with many sources of data. The researcher must be able to combine multiple datasets to answer the questions he or she is interested in. Collectively, these multiple tables of data are called **relational data** because more than the individual datasets, its the relations that are more important.\n\nAs with the other `dplyr` verbs, there are different families of verbs that are designed to work with relational data and one of the most commonly used family of verbs are the mutating joins.\n\n![Different type of joins, represented by a series of Venn Diagram](images/dplyr_joins.jpg){fig-align=\"center\" width=\"300\"}\n\nThese include:\n\n-   `left_join(x, y)` which combines all columns in data frame `x` with those in data frame `y` but only retains rows from `x`.\n\n-   `right_join(x, y)` also keeps all columns but operates in the opposite direction, returning only rows from `y`.\n\n-   `full_join(x, y)` combines all columns of `x` with all columns of `y` and retains all rows from both data frames.\n\n-   `inner_join(x, y)` combines all columns present in either `x` or `y` but only retains rows that are present in both data frames.\n\n-   `anti_join(x, y)` returns the columns from `x` only and retains rows of `x` that are not present in `y`.\n\n-   `anti_join(y, x)` returns the columns from `y` only and retains rows of `y` that are not present in `x`.\n\n![Visual representation of the join() family of verbs](images/dplyr_joins1.png){fig-align=\"center\" width=\"500\"}\n\nApart from specifying the data frames to be joined, we also need to specify the key column(s) that is to be used for joining the data. Key columns are specified with the `by` argument, e.g. `inner_join(x, y, by = \"subject_id\")` adds columns of `y` to `x` for all rows where the values of the \"`subject_id`\" column (present in each data frame) match. If the name of the key column is different in both the dataframes, e.g. \"`subject_id`\" in `x` and \"`subj_id`\" in `y`, then you have to specify both names using `by = c(\"subject_id\" = \"subj_id\")`.\n\n**Example**\n\nLets try to join the basic information dataset (`nhanes_basic_info.csv`) with clinical dataset (`nhanes_clinical_info.rds`).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbasic <- read_csv(\n  here(\"data\", \n       \"nhanes_basic_info.csv\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 5679 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): gender, race, education, marital_status, home_own, work, bmi_who\ndbl (7): unique_id, age, income_hh, poverty, home_rooms, height, weight\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nclinical <- read_rds(\n  here(\"data\", \n       \"nhanes_clinical_info.rds\"))\n\ndf <- basic |> \n  left_join(clinical)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(unique_id)`\n```\n\n\n:::\n:::\n\n\n\n\nTry to join behaviour dataset (`nhanes_behaviour_info.rds`).\n\n:::\n\n### `pivot()`\n\n:::{style=\"text-align:justify\"}\n\nMost often, when working with our data we may have to reshape our data from long format to wide format and back. We can use the `pivot` family of functions to achieve this task. What we mean by \"the shape of our data\" is how the values are distributed across rows or columns. Here's a visual representation of the same data in two different shapes:\n\n![Long and Wide format of our data](images/long_wide.png){fig-align=\"center\" width=\"394\"}\n\n-   \"Long\" format is where we have a column for each of the types of things we measured or recorded in our data. In other words, each variable has its own column.\n\n-   \"Wide\" format occurs when we have data relating to the same measured thing in different columns. In this case, we have values related to our \"metric\" spread across multiple columns (a column each for a year).\n\nLet us now use the `pivot` functions to reshape the data in practice. The two `pivot` functions are:\n\n-   `pivot_wider()`: from long to wide format.\n-   `pivot_longer()`: from wide to long format.\n\n![](images/tidyr_pivot.png){fig-align=\"center\" width=\"394\"}\n\nLets try `pivot_longer`. Suppose we need a long data format for the `bp_sys` and `bp_sys_post` variables:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_long <- df |> \n  pivot_longer(\n    cols = c(bp_sys, bp_sys_post),\n    names_to = \"bp_sys_cat\",\n    values_to = \"bp_value\")\n```\n:::\n\n\n\n\nLets try `pivot_wider`. Suppose we need a wide data format for `height` variable based on `race` variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_wider <- df |> \n  pivot_wider(names_from = \"race\",\n              values_from = \"height\",\n              names_prefix = \"height_\")\n```\n:::\n\n\n\n\n\n:::{style=\"text-align:justify\"}\n\n#### Resources for learning more dplyr {.unnumbered}\n\n:::{style=\"text-align:justify\"}\n\n-   Check out the [Data Wrangling cheatsheet](https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf) that covers dplyr and tidyr functions.(https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)\n\n-   Review the [Tibbles](https://r4ds.had.co.nz/tibbles.html) chapter of the excellent, free [***R for Data Science*** **book**](http://r4ds.had.co.nz).(https://r4ds.had.co.nz/tibbles.html)\n\n-   Check out the [Transformations](https://r4ds.had.co.nz/transform.html) chapter to learn more about the dplyr package. Note that this chapter also uses the graphing package ggplot2 which we have covered yesterday.(https://r4ds.had.co.nz/transform.html)\n\n-   Check out the [Relational Data](https://r4ds.had.co.nz/relational-data.html) chapter to learn more about the joins.(https://r4ds.had.co.nz/relational-data.html)\n\n:::\n\n\n\n\n## `skimr` Package\n\n`skimr` is designed to provide summary statistics about variables in data frames, tibbles, data tables and vectors. The core function of `skimr` is the `skim()` function, which is designed to work with (grouped) data frames, and will try coerce other objects to data frames if possible.\n\n![](images/skimr.png){fig-align=\"center\" width=\"100\"}\n\nGive `skim()` a try.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  skimr::skim()\n```\n:::\n\n\n\n\nCheck out the names of the output of `skimr`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  skimr::skim() |> \n  names()\n```\n:::\n\n\n\n\nAlso works with `dplyr` verbs\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  group_by(race) |> \n  skimr::skim()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> \n  skimr::skim() |>\n  dplyr::select(skim_type, skim_variable, n_missing)\n```\n:::\n\n\n\n\n## `DataExplorer` Package\n\nThe `DataExplorer` package aims to automate most of data handling and visualization, so that users could focus on studying the data and extracting insights.[^exploring_data-1]\n\n[^exploring_data-1]: [DataExplorer Package](https://boxuancui.github.io/DataExplorer/)\n\n![](images/dataexplorer.png){fig-align=\"center\" width=\"100\"}\n\nThe single most important function from the `DataExplorer` package is `create_report()`\n\nTry it for yourself.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(DataExplorer)\n\ncreate_report(df)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}