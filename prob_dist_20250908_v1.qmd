---
title: "Probability Distributions for Health Technology Assessment"
format: 
  html:
    toc: true
    theme: cosmo
embed-resources: true
code-fold: true
---

## What is a Probability Distribution?

A probability distribution is a mathematical function that describes the likelihood—or probability—of each possible outcome of a random experiment.

We can visualize this with two axes:

*   **The X-Axis (Horizontal):** This represents all **possible values** that the variable can take. This could be clinical outcomes like cost, survival time, utility scores, or the number of adverse events.
*   **The Y-Axis (Vertical):** This represents the **probability** (or relative likelihood) of each of those values occurring.

> **In short: A probability distribution defines how likely different future outcomes are.**

### A Simple Example: The Coin Flip
Imagine flipping a fair coin twice and counting the number of heads. The possible outcomes (X) are 0, 1, or 2 heads.

The probability distribution for this experiment is:

| Number of Heads (X) | Probability P(X) |
| :------------------ | :--------------- |
| 0                   | 0.25             |
| 1                   | 0.50             |
| 2                   | 0.25             |

We can plot this. The x-axis would have the values 0, 1, and 2. The y-axis would show the probabilities 0.25, 0.50, and 0.25 as bars. This is a simple **discrete probability distribution**.

### Visualizing the Distribution

While the table is useful, it is often easier to understand a probability distribution by looking at its graph. The visual representation makes the "shape" of the distribution immediately clear.

Let's plot the coin flip example using R's `ggplot2` package, which is powerful for creating elegant and customizable graphics. For a discrete distribution like this, we use a **bar plot** (or a spike plot), where the height of each bar corresponds to the probability of each outcome.

```{r}
#| echo: true
#| warning: false
#| message: false
#| fig-cap: "Bar plot of the probability distribution for the number of heads in two coin flips, created with ggplot2."

library(ggplot2) # Load the ggplot2 package

# Create a data frame from our table
coin_data <- data.frame(
  Heads = c(0, 1, 2),           # X-axis values (Number of Heads)
  Probability = c(0.25, 0.50, 0.25) # Y-axis values (Probability)
)

# Create the plot using ggplot2
ggplot(data = coin_data, aes(x = Heads, y = Probability)) +
  geom_col(fill = "steelblue", width = 0.6) +      # Create bars
  geom_text(aes(label = Probability), vjust = -0.5) + # Add labels on top of bars
  scale_x_continuous(breaks = c(0, 1, 2)) +        # Ensure all values are on x-axis
  labs(title = "Probability Distribution of Two Coin Flips",
       x = "Number of Heads (X)",
       y = "Probability P(X)") +
  theme_minimal() +                                # Use a clean theme
  ylim(0, 0.6)                                     # Set the y-axis limits

```

## Types of Probability Distributions

### Discrete Probability Distributions

- These describe the probabilities of outcomes for countable, distinct values—such as 0, 1, 2, etc.

- The probability of each possible value is given by a probability mass function (PMF).

Major discrete distributions in health data include:

| Distribution | PMF, $P(X=k)$ | Parameters |
| :--- | :--- | :--- |
| **Bernoulli** | $p^k (1-p)^{1-k}$ | `prob` ($p$) |
| **Binomial** | $\binom{n}{k} p^k (1-p)^{n-k}$ | `size` ($n$), `prob` ($p$) |
| **Poisson** | $\frac{\lambda^k e^{-\lambda}}{k!}$ | `lambda` ($\lambda$) |
| **Negative Binomial**| $\binom{k + r - 1}{k} p^r (1-p)^k$ | `size` ($r$), `prob` ($p$) |

### Continuous Probability Distributions

- These describe probabilities for any value within an interval (not just whole numbers, but all real values within a range).

- The probability is given by a probability density function (PDF); probabilities refer to intervals, not exact values.

Major continuous distributions in health and medical research include:


| Distribution | PDF, $f(x)$ | Parameters |
| :--- | :--- | :--- |
| **Normal** | $\frac{1}{\sigma\sqrt{2\pi}} e^{-\frac{1}{2}\left(\frac{x-\mu}{\sigma}\right)^2}$ | `mean` ($\mu$), `sd` ($\sigma$) |
| **Log-Normal** | $\frac{1}{x\sigma\sqrt{2\pi}} e^{-\frac{(\ln x - \mu)^2}{2\sigma^2}}$ | `meanlog` ($\mu$), `sdlog` ($\sigma$) |
| **Exponential** | $\lambda e^{-\lambda x}$ | `rate` ($\lambda$) |
| **Gamma** | $\frac{\beta^{\alpha}}{\Gamma(\alpha)} x^{\alpha-1} e^{-\beta x}$ | `shape` ($\alpha$), `rate` ($\beta$) |
| **Weibull** | $\frac{k}{\lambda} \left( \frac{x}{\lambda} \right)^{k-1} e^{-(x/\lambda)^k}$ | `shape` ($k$), `scale` ($\lambda$) |
| **Beta** | $\frac{x^{\alpha-1}(1-x)^{\beta-1}}{B(\alpha, \beta)}$ | `shape1` ($\alpha$), `shape2` ($\beta$) |

## Parameters of Probability Distributions

Now that you have seen the mathematical equations defining different probability distributions, you might have noticed many terms inside these formulas—like $\mu$, $\sigma$, $\lambda$, $\alpha$, and $k$. These terms are called the parameters of a distribution.

### Why Are Parameters Important?

- The shape or curve of each probability distribution is determined by the values of these parameters.

- They control where the distribution is centered, how spread out it is, and how it is skewed or shaped.

- Although the formulas might look complicated at first, understanding these parameters gives you a powerful way to describe and work with uncertainty in Health Technology Assessment.

### Three Major Types of Parameters

Most distributions have some combination of these key parameter types:

*   **Location Parameter ($\mu$, mean):** Defines the "center" or position of the distribution on the x-axis.
*   **Scale Parameter ($\sigma$, variance):** Defines the spread or variability of the distribution.
*   **Shape Parameter ($k$, $\alpha$, $\beta$):** Controls the overall form or peakness/skewness of the distribution.

> **Note:** Not all distributions require all three parameter types. Some have additional or transformed parameters (e.g., the `rate` in an Exponential distribution), but the broad concepts of location, scale, and shape cover most cases.

### Detailed Examples of Parameter Types

#### 1. Location Parameter ($\mu$)
A location parameter shifts the entire distribution along the x-axis without changing its spread or shape.

**Example: Normal Distribution with Constant Scale**

Two Normal distributions with the same standard deviation ($\sigma = 1$) but different means:

- $N(\mu=0, \sigma=1)$ is centered at 0
- $N(\mu=2, \sigma=1)$ is centered at 2

The change in $\mu$ moves the center of the bell curve.

```{r}
#| message: false
#| warning: false
#| fig-align: 'center'


curve(dnorm(x, mean = 0, sd = 1), from = -7, to = 7, col = "blue", lwd = 2, ylab = "Density", xlab = "x", main = "Location Parameter (Normal Distribution)")
curve(dnorm(x, mean = 2, sd = 1), col = "red", lwd = 2, add = TRUE)
legend("topright", legend = c("N(0,1)", "N(2,1)"), col = c("blue", "red"), lwd = 2)

```


#### 2. Scale Parameter ($\sigma$)
A scale parameter stretches or squeezes the distribution, changing its spread without changing its location or fundamental shape.

**Example: Normal Distribution with Constant Location**
Two Normal distributions with the same mean ($\mu = 0$) but different standard deviations:
- $N(\mu=0, \sigma=1)$ is narrow and tall
- $N(\mu=0, \sigma=2)$ is wide and short
The change in $\sigma$ alters the variability.



```{r}
#| message: false
#| warning: false
#| fig-align: 'center'

curve(dnorm(x, mean = 0, sd = 1), from = -6, to = 6, col = "darkgreen", lwd = 2, ylab = "Density", xlab = "x", main = "Scale Parameter (Normal Distribution)")
curve(dnorm(x, mean = 0, sd = 2), col = "orange", lwd = 2, add = TRUE)
legend("topright", legend = c("N(0,1)", "N(0,2)"), col = c("darkgreen", "orange"), lwd = 2)
```



> The Normal distribution does not have a separate shape parameter. Its symmetric bell curve shape is constant and determined solely by $\mu$ and $\sigma$.

#### 3. Shape Parameter ($\alpha$, $\beta$)
Shape parameters control the fundamental form of the distribution, such as its skewness or peakedness.

**Example: Beta Distribution**
The Beta distribution uses two shape parameters ($\alpha$, $\beta$):

- $\alpha = \beta = 1$: Uniform distribution
- $\alpha < \beta$: Right-skewed distribution
- $\alpha > \beta$: Left-skewed distribution
- $\alpha = \beta > 1$: Bell-shaped and symmetric
Changing $\alpha$ and $\beta$ fundamentally alters the distribution's shape.


**Chunk 3: Shape Parameter Plot**

```{r}
#| message: false
#| warning: false
#| fig-align: 'center'

curve(dbeta(x, shape1 = 0.5, shape2 = 0.5), from = 0, to = 1, col = "red", lwd = 2, ylab = "Density", xlab = "x", main = "Shape Parameters (Beta Distribution)")
curve(dbeta(x, shape1 = 2, shape2 = 5), col = "blue", lwd = 2, add = TRUE)
curve(dbeta(x, shape1 = 5, shape2 = 2), col = "green", lwd = 2, add = TRUE)
curve(dbeta(x, shape1 = 2, shape2 = 2), col = "purple", lwd = 2, add = TRUE)
legend("top", legend = c("Beta(0.5,0.5)", "Beta(2,5)", "Beta(5,2)", "Beta(2,2)"), 
       col = c("red", "blue", "green", "purple"), lwd = 2, cex = 0.8)
       
```

## Transforming Mean and SD into Distribution Parameters

In HTA, we often only have summary statistics (mean and standard deviation) for a parameter. The following formulas are used to estimate the parameters of common distributions for probabilistic sensitivity analysis.

| Distribution | Parameters to Find | Conversion Formulas |
| :--- | :--- | :--- |
| **Normal** | `mean` ($\mu$), `sd` ($\sigma$) | $\mu = \bar{x}$ <br> $\sigma = s$ |
| **Gamma** | `shape` ($\alpha$), `rate` ($\beta$) | $\alpha = \frac{\bar{x}^2}{s^2}$ <br> $\beta = \frac{\bar{x}}{s^2}$ |
| **Log-Normal** | `meanlog` ($\mu$), `sdlog` ($\sigma$) | $\mu = \ln\left(\frac{\bar{x}^2}{\sqrt{s^2 + \bar{x}^2}}\right)$ <br> $\sigma = \sqrt{\ln\left(1 + \frac{s^2}{\bar{x}^2}\right)}$ |
| **Beta** | `shape1` ($\alpha$), `shape2` ($\beta$) | $\alpha = \bar{x} \left( \frac{\bar{x}(1-\bar{x})}{s^2} - 1 \right)$ <br> $\beta = (1 - \bar{x}) \left( \frac{\bar{x}(1-\bar{x})}{s^2} - 1 \right)$ |

Where:
- $\bar{x}$ = sample mean
- $s$ = sample standard deviation
- $s^2$ = sample variance

> **Important Note for Beta Distribution:** The formulas for the Beta distribution assume the data represents proportions bounded between 0 and 1. Ensure your mean and SD are appropriate for this scale.


## When to Use Each Distribution in HTA

Different types of data in HTA require different probability distributions for accurate modeling. Here's a guide based on outcome types:

| Data Type | Common Distributions | Notes on Use |
| :--- | :--- | :--- |
| **Binary Outcomes** | Bernoulli, Binomial | Models presence/absence (e.g., treatment success/failure) |
| **Counts of Events** | Poisson, Negative Binomial | Number of adverse events, hospital visits; Negative Binomial handles overdispersion |
| **Continuous Measurements** | Normal, Log-normal, Gamma, Weibull | Biomarkers, costs, survival times; Log-normal and Gamma handle skewed data |
| **Time-to-event Data** | Exponential, Weibull | Models survival times, waiting times, or time to relapse |
| **Proportions/Fractions** | Beta | Health utilities, probabilities constrained between 0 and 1 |


## Working with Distributions in R

R provides a consistent set of functions for working with probability distributions, following a standard naming pattern:

### The Four Key Functions

| Prefix | Purpose | Example (Normal) |
| :--- | :--- | :--- |
| **`d`** | Density or Probability Mass Function (PDF/PMF) | `dnorm(x, mean, sd)` |
| **`p`** | Cumulative Distribution Function (CDF) | `pnorm(q, mean, sd)` |
| **`q`** | Quantile Function (Inverse CDF) | `qnorm(p, mean, sd)` |
| **`r`** | Random Number Generation | `rnorm(n, mean, sd)` |

### Common Distribution Functions

This pattern applies to all major distributions:

| Distribution | Density/PMF | CDF | Quantile | Random |
| :--- | :--- | :--- | :--- | :--- |
| **Normal** | `dnorm()` | `pnorm()` | `qnorm()` | `rnorm()` |
| **Binomial** | `dbinom()` | `pbinom()` | `qbinom()` | `rbinom()` |
| **Poisson** | `dpois()` | `ppois()` | `qpois()` | `rpois()` |
| **Exponential** | `dexp()` | `pexp()` | `qexp()` | `rexp()` |
| **Gamma** | `dgamma()` | `pgamma()` | `qgamma()` | `rgamma()` |
| **Beta** | `dbeta()` | `pbeta()` | `qbeta()` | `rbeta()` |
| **Weibull** | `dweibull()` | `pweibull()` | `qweibull()` | `rweibull()` |
| **Log-normal** | `dlnorm()` | `plnorm()` | `qlnorm()` | `rlnorm()` |
| **Negative Binomial** | `dnbinom()` | `pnbinom()` | `qnbinom()` | `rnbinom()` |

### Example Usage


#### Probability of exactly 2 successes in 5 trials with p=0.5

```{r}
#| code-fold: false

dbinom(2, size = 5, prob = 0.5)

```


#### Probability of ≤3 adverse events when λ=2

```{r}
#| code-fold: false

ppois(3, lambda = 2)
```

#### 95th percentile of Normal(0,1)

```{r}
#| code-fold: false

qnorm(0.95, mean = 0, sd = 1)
```

#### Generate 10 random costs from Gamma(shape=2, rate=0.1)

```{r}
#| code-fold: false

rgamma(10, shape = 2, rate = 0.1)
```


## Visualizing Distributions with `curve()`

The `curve()` function is useful for visualizing the probability density function (PDF) or probability mass function (PMF) of a distribution.

### 1. Normal Distribution

```{r}
#| code-fold: false

curve(dnorm(x, mean = 2, sd = 1), from = -2, to = 6, main = "Normal(μ=2, σ=1)", ylab = "Density", xlab = "x")

```


### 2. Gamma Distribution


```{r}
#| code-fold: false
curve(dgamma(x, shape = 2, rate = 1), from = 0, to = 8, main = "Gamma(α=2, β=1)", ylab = "Density", xlab = "x")
```

### 3. Beta Distribution

```{r}
#| code-fold: false

curve(dbeta(x, shape1 = 2, shape2 = 5), from = 0, to = 1, main = "Beta(α=2, β=5)", ylab = "Density", xlab = "x")

```

### 4. Exponential Distribution

```{r}
#| code-fold: false

curve(dexp(x, rate = 0.5), from = 0, to = 8, main = "Exponential(λ=0.5)", ylab = "Density", xlab = "x")

```

### 5. Weibull Distribution

```{r}
#| code-fold: false

curve(dweibull(x, shape = 2, scale = 1), from = 0, to = 3, main = "Weibull(k=2, λ=1)", ylab = "Density", xlab = "x")

```


### 6. Log-Normal Distribution

```{r}
#| code-fold: false

curve(dlnorm(x, meanlog = 0, sdlog = 0.5), from = 0, to = 5, main = "Log-Normal(μ=0, σ=0.5)", ylab = "Density", xlab = "x")

```


### 7. Binomial Distribution (PMF)

```{r}
#| code-fold: false

x <- 0:10
plot(x, dbinom(x, size = 10, prob = 0.5), type = "h", lwd = 3, 
     main = "Binomial(n=10, p=0.5)", ylab = "P(X = k)", xlab = "Number of Successes (k)")


```

### 8. Poisson Distribution (PMF)

```{r}
#| code-fold: false

x <- 0:15
plot(x, dpois(x, lambda = 4), type = "h", lwd = 3, main = "Poisson(λ=4)", ylab = "P(X = k)", xlab = "Number of Events (k)")
points(x, dpois(x, lambda = 4), pch = 16)

```


### 9. Negative Binomial Distribution (PMF)

```{r}
#| code-fold: false

x <- 0:20
plot(x, dnbinom(x, size = 2, prob = 0.4), type = "h", lwd = 3,
     main = "Negative Binomial(r=2, p=0.4)", ylab = "P(X = k)", xlab = "Number of Failures (k)")
points(x, dnbinom(x, size = 2, prob = 0.4), pch = 16)

```



## Case Study

### Data

```{r}
#| warning: false
#| message: false
#| code-fold: false

library(tidyverse)
library(here)

df <- readxl::read_excel(here("data", "distributions_hta_casestudy.xlsx"))

kableExtra::kable(df, format.args = list(big.mark = ",", scientific = FALSE))
```


### Transforming Data

```{r}
#| code-fold: false


owsa_range <- 0.2

df <- df |> 
  mutate(
    low = round((1 - owsa_range) * root_definition, 4),
    high = round((1 + owsa_range) * root_definition, 4),
    se = round( (high - low) / (2 * qnorm(0.975)), 4) 
  )

df <- df |>
  mutate(
    # Calculate alpha and beta for Gamma/Beta, meanlog and sdlog for LogN
    param1 = case_when(
      distribution == "Gamma" ~ (root_definition^2) / (se^2),
      distribution == "Beta" ~ root_definition * ( (root_definition*(1-root_definition)/(se^2)) - 1 ),
      distribution == "LogN" ~ log(root_definition^2 / sqrt(se^2 + root_definition^2)),
      TRUE ~ NA_real_
    ),
    param2 = case_when(
      distribution == "Gamma" ~ root_definition / (se^2),
      distribution == "Beta" ~ (1 - root_definition) * ( (root_definition*(1-root_definition)/(se^2)) - 1 ),
      distribution == "LogN" ~ sqrt(log(1 + (se^2 / root_definition^2))),
      TRUE ~ NA_real_
    ),
    # Create the formatted parameter strings for R with correct argument names
    parameters = case_when(
      distribution == "Gamma" ~ paste0("shape = ", round(param1, 4), ", rate = ", round(param2, 6)),
      distribution == "Beta" ~ paste0("shape1 = ", round(param1, 4), ", shape2 = ", round(param2, 4)),
      distribution == "LogN" ~ paste0("meanlog = ", round(param1, 4), ", sdlog = ", round(param2, 4)),
      TRUE ~ "Distribution not specified"
    )
  )
```

### Sampling and Visualising Distributions 

#### For Gamma Distribution

```{r}
#| code-fold: false


df |> 
  filter(distribution == "Gamma") |> 
  slice(1) |> 
  select(parameters)

set.seed(123)
samples_gamma <- rgamma(1000, shape = 96.0365, rate = 0.00064)

hist(samples_gamma, probability = TRUE, breaks = 30, col = "lightblue", 
     main = "Histogram with Gamma PDF", xlab = "Value")
curve(dgamma(x, shape = 96.0365, rate = 0.00064), col = "red", add = TRUE, lwd = 2)

```


#### For Beta Distribution

```{r}
#| code-fold: false

df |> 
  filter(distribution == "Beta") |> 
  slice(1) |> 
  select(parameters)

set.seed(123)
samples_beta <- rbeta(1000, shape1 = 66.9818, shape2 = 156.2909) 

hist(samples_beta, probability = TRUE, breaks = 30, col = "lightgreen", 
     main = "Histogram with Beta PDF", xlab = "Value", xlim = c(0,1))
curve(dbeta(x, shape1 = 66.9818, shape2 = 156.2909), col = "blue", add = TRUE, lwd = 2)

```

#### For Log Normal Distribution

```{r}
#| code-fold: false


df |> 
  filter(distribution == "LogN") |> 
  slice(1) |> 
  select(parameters)

set.seed(123)
samples_lnorm <- rlnorm(1000, meanlog = -0.0052, sdlog = 0.1017) # Use your calculated param1 & param2

hist(samples_lnorm, probability = TRUE, breaks = 30, col = "lightcoral", 
     main = "Histogram with Log-Normal PDF", xlab = "Value")
curve(dlnorm(x, meanlog = -0.0052, sdlog = 0.1017), col = "purple", add = TRUE, lwd = 2)

```



